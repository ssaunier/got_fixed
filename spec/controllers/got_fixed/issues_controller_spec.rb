require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module GotFixed
  describe IssuesController do

    routes { GotFixed::Engine.routes }

    # This should return the minimal set of attributes required to create a valid
    # Issue. As you add validations to Issue, be sure to
    # update the return value of this method accordingly.
    def valid_attributes
      { "title" => "MyString" }
    end

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # IssuesController. Be sure to keep this updated too.
    def valid_session
      {}
    end

    describe "GET index" do
      it "assigns all issues as @issues" do
        issue = Issue.create! valid_attributes
        get :index, {}, valid_session
        assigns(:issues).should eq([issue])
      end
    end

    describe "POST github_webhook" do
      it "creates an issue from an 'closed' event" do
        params = JSON.load(File.open "spec/factories/github/hook-issues-event.json")
        request.headers["X-Hub-Signature"] = "sha1=7e5f575e2e92360b4f13a2100d930e770f26fde3"
        request.headers["Content-Type"] = "application/json"
        request.env["RAW_POST_DATA"] = JSON.generate(params)  # Hackish as Rspec creates a url-encoded payload...
        post :github_webhook, params, :format => :json

        @issue = assigns(:issue)
        @issue.should be_valid
        @issue.vendor_id.should eq params["issue"]["id"].to_s
        @issue.title.should eq params["issue"]["title"]
        @issue.closed.should be_true
      end
    end

    describe "POST subscribe" do
      before(:each) do
        @issue = FactoryGirl.create :got_fixed_issue
        @issue.users.should be_blank
      end

      it "creates a user and subscribe him if the email does not exist" do
        post :subscribe, :id => @issue.id, :user => { :email => "foo@bar.com" }, :format => :js

        @user = assigns(:user)
        @user.email.should eq "foo@bar.com"
        @issue.reload.users.should_not be_blank
      end

      it "should subscribe an existing user" do
        User.create! :email => "foo@bar.com"
        post :subscribe, :id => @issue.id, :user => { :email => "foo@bar.com" }, :format => :js

        @user = assigns(:user)
        @user.email.should eq "foo@bar.com"
        @issue.reload.users.should_not be_blank
      end

      it "should behave well when user already registered (not register him twice)" do
        @issue.users << User.create!(:email => "foo@bar.com")
        @issue.save

        post :subscribe, :id => @issue.id, :user => { :email => "foo@bar.com" }, :format => :js

        @issue.reload.users.size.should eq 1
      end
    end

    # describe "POST create" do
    #   describe "with valid params" do
    #     it "creates a new Issue" do
    #       expect {
    #         post :create, {:issue => valid_attributes}, valid_session
    #       }.to change(Issue, :count).by(1)
    #     end

    #     it "assigns a newly created issue as @issue" do
    #       post :create, {:issue => valid_attributes}, valid_session
    #       assigns(:issue).should be_a(Issue)
    #       assigns(:issue).should be_persisted
    #     end

    #     it "redirects to the created issue" do
    #       post :create, {:issue => valid_attributes}, valid_session
    #       response.should redirect_to(Issue.last)
    #     end
    #   end

    #   describe "with invalid params" do
    #     it "assigns a newly created but unsaved issue as @issue" do
    #       # Trigger the behavior that occurs when invalid params are submitted
    #       Issue.any_instance.stub(:save).and_return(false)
    #       post :create, {:issue => { "title" => "invalid value" }}, valid_session
    #       assigns(:issue).should be_a_new(Issue)
    #     end

    #     it "re-renders the 'new' template" do
    #       # Trigger the behavior that occurs when invalid params are submitted
    #       Issue.any_instance.stub(:save).and_return(false)
    #       post :create, {:issue => { "title" => "invalid value" }}, valid_session
    #       response.should render_template("new")
    #     end
    #   end
    # end

    # describe "PUT update" do
    #   describe "with valid params" do
    #     it "updates the requested issue" do
    #       issue = Issue.create! valid_attributes
    #       # Assuming there are no other issues in the database, this
    #       # specifies that the Issue created on the previous line
    #       # receives the :update_attributes message with whatever params are
    #       # submitted in the request.
    #       Issue.any_instance.should_receive(:update_attributes).with({ "title" => "MyString" })
    #       put :update, {:id => issue.to_param, :issue => { "title" => "MyString" }}, valid_session
    #     end

    #     it "assigns the requested issue as @issue" do
    #       issue = Issue.create! valid_attributes
    #       put :update, {:id => issue.to_param, :issue => valid_attributes}, valid_session
    #       assigns(:issue).should eq(issue)
    #     end

    #     it "redirects to the issue" do
    #       issue = Issue.create! valid_attributes
    #       put :update, {:id => issue.to_param, :issue => valid_attributes}, valid_session
    #       response.should redirect_to(issue)
    #     end
    #   end

    #   describe "with invalid params" do
    #     it "assigns the issue as @issue" do
    #       issue = Issue.create! valid_attributes
    #       # Trigger the behavior that occurs when invalid params are submitted
    #       Issue.any_instance.stub(:save).and_return(false)
    #       put :update, {:id => issue.to_param, :issue => { "title" => "invalid value" }}, valid_session
    #       assigns(:issue).should eq(issue)
    #     end

    #     it "re-renders the 'edit' template" do
    #       issue = Issue.create! valid_attributes
    #       # Trigger the behavior that occurs when invalid params are submitted
    #       Issue.any_instance.stub(:save).and_return(false)
    #       put :update, {:id => issue.to_param, :issue => { "title" => "invalid value" }}, valid_session
    #       response.should render_template("edit")
    #     end
    #   end
    # end

    # describe "DELETE destroy" do
    #   it "destroys the requested issue" do
    #     issue = Issue.create! valid_attributes
    #     expect {
    #       delete :destroy, {:id => issue.to_param}, valid_session
    #     }.to change(Issue, :count).by(-1)
    #   end

    #   it "redirects to the issues list" do
    #     issue = Issue.create! valid_attributes
    #     delete :destroy, {:id => issue.to_param}, valid_session
    #     response.should redirect_to(issues_url)
    #   end
    # end

  end
end
